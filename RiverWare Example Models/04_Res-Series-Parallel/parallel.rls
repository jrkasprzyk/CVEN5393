# RiverWare_Ruleset 9.5
# Created 14:55 August 6, 2025
# 
RULESET
NAME "RBS Basic Operations Parallel";
AGENDA_ORDER ASCENDING;
DESCRIPTION "";
PRECISION   2;
NOTES "";
BEGIN

  POLICY_GROUP   "Right Operations";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Right Res Flood Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Right Reservoir.Release" [] := IF ( $ "Right Reservoir.Pool Elevation" [] > $ "Right Rule Curve.Flood PE" [] )
 THEN
  "ReleaseToTargetPE"( % "Right Reservoir", $ "Right Rule Curve.Flood PE" [], @"t" )
 ENDIF;

    END
    UUID "{9f463204-9be0-4557-95a7-d5cb5b2b9471}";;

    RULE                 "Initialize Right Res Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Right Reservoir.Release" [] := "ReleaseToDesiredFlow"( % "Right Reservoir", $ "Right Rule Curve.Desired Release" [], @"t" );

    END
    UUID "{66eb281a-444d-4004-b1b2-ec35bed99e49}";;

  END
  UUID "{da3ce301-100a-4e2d-bee8-7424af312ca7}";;

  POLICY_GROUP   "Left Operations";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  NOTES          "";
  BEGIN

    RULE                 "Left Res Flood Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Left Reservoir.Release" [] := IF ( $ "Left Reservoir.Pool Elevation" [] > $ "Left Rule Curve.Flood PE" [] )
 THEN
  "ReleaseToTargetPE"( % "Left Reservoir", $ "Left Rule Curve.Flood PE" [], @"t" )
 ENDIF;

    END
    UUID "{63d0b4aa-7265-4b07-84df-685374751fef}";;

    RULE                 "Initialize Left Res Release";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      BREAKPOINT BEFORE_EXEC FALSE;
    BREAKPOINT AFTER_EXEC FALSE;
      $ "Left Reservoir.Release" [] := "ReleaseToDesiredFlow"( % "Left Reservoir", $ "Left Rule Curve.Desired Release" [], @"t" );

    END
    UUID "{577ebbab-ef61-444e-a833-699aa358a8b0}";;

  END
  UUID "{0bb76593-dc88-4b3c-8058-af0a9937484c}";;

  POLICY_GROUP   "Rules for Testing";
  DESCRIPTION    "";
  ACTIVE         FALSE;
  NOTES          "";
  BEGIN

    RULE                 "Test Values";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    NOTES                "";
    BEGIN

      $ "Left Reservoir.Test Upper Res Release" [] := "ReleaseToDesiredFlow"( % "Left Reservoir", $ "Left Rule Curve.Desired Release" [], @"t" );

      $ "Left Reservoir.Test Upper Res Max Release" [] := "GetMaxReleaseGivenInflow"( % "Left Reservoir", % "Left Reservoir" & "Inflow" [@"t"], @"t" );

    END
    UUID "{ff824447-bb28-49cc-8cd9-6407bc209b15}";;

  END
  UUID "{0fc6e290-fdf3-4121-b183-9f59a51743fb}";;

  UTILITY_GROUP "Reservoir Functions";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  NOTES          "";
  BEGIN

    FUNCTION       "ReleaseToTargetPE" ( OBJECT res, NUMERIC target_pe, DATETIME time_step )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "Min"( "SolveOutflow"( res, res & "Inflow" [time_step], "ElevationToStorage"( res, target_pe ), $ "Right Reservoir.Storage" ["OffsetDate"( time_step, - 1.00000000, "1 Days" )], time_step ), "GetMaxReleaseGivenInflow"( res, res & "Inflow" [time_step], time_step ) );

    END
    UUID "{95b62411-56c1-4a89-8f7c-e9b15f59e895}";;

    FUNCTION       "ReleaseToDesiredFlow" ( OBJECT res, NUMERIC desired_flow, DATETIME time_step )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    NOTES          "";
    BEGIN

      "Min"( desired_flow, "GetMaxReleaseGivenInflow"( res, res & "Inflow" [time_step], time_step ) );

    END
    UUID "{7f98d051-b3da-481c-b4b0-373cb64e7c79}";;

  END
  UUID "{3d9e5d06-d8b3-4092-95c6-f4265be9421c}";;

END
UUID "{c39db568-d861-4759-926e-789bc071e17e}";
